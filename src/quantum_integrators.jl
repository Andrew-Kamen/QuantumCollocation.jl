module QuantumIntegrators

export KetIntegrator
export UnitaryIntegrator
export DensityMatrixIntegrator
export AdjointUnitaryIntegrator

using LinearAlgebra
using NamedTrajectories
using DirectTrajOpt
using PiccoloQuantumObjects
using SparseArrays

const ‚äó = kron

function KetIntegrator(
    sys::QuantumSystem,
    traj::NamedTrajectory, 
    œàÃÉ::Symbol, 
    a::Symbol 
) 
    return BilinearIntegrator(sys.G, traj, œàÃÉ, a)
end

function UnitaryIntegrator(
    sys::QuantumSystem,
    traj::NamedTrajectory, 
    UÃÉ‚Éó::Symbol, 
    a::Symbol
) 
    GÃÇ = a_ -> I(sys.levels) ‚äó sys.G(a_)
    return BilinearIntegrator(GÃÇ, traj, UÃÉ‚Éó, a)
end

function DensityMatrixIntegrator(
    sys::OpenQuantumSystem,
    traj::NamedTrajectory, 
    œÅÃÉ::Symbol, 
    a::Symbol
) 
    return BilinearIntegrator(sys.ùí¢, traj, œÅÃÉ, a)
end


function AdjointUnitaryIntegrator(
    sys::ParameterizedQuantumSystem,
    traj::NamedTrajectory, 
    UÃÉ‚Éó::Symbol, 
    UÃÉ‚Éó‚Çê::Vector{Symbol},
    a::Symbol
) 
    n_sys = length(sys.G‚Çê)
    
    G = a_ -> I(sys.levels) ‚äó sys.G(a_)

    Gai = (i,a_) -> I(sys.levels) ‚äó sys.G‚Çê[i](a_)

    function GÃÇ(a_)
        G_eval = G(a_)
        dim = size(G_eval)[1]    
        Gx_index, Gy_index, G_val = findnz(G_eval)
        G_full = spzeros((n_sys+1).*size(G_eval))
    
        for i ‚àà 0:n_sys
            G_full +=    sparse((i*dim) .+ Gx_index, (i*dim) .+ Gy_index, G_val, size(G_full)...)
            if(i<n_sys)
                Ga_x_index, Ga_y_index, Ga_val = findnz(Gai(i+1,a_))
                G_full +=    sparse((i*dim) .+ Ga_x_index, (n_sys*dim) .+ Ga_y_index, Ga_val, size(G_full)...)
            end
        end 
        return G_full
    end
    
    return AdjointBilinearIntegrator(GÃÇ, traj, UÃÉ‚Éó, UÃÉ‚Éó‚Çê, a)
end


end