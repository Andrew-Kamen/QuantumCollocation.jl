module QuantumIntegrators

export KetIntegrator
export UnitaryIntegrator
export DensityMatrixIntegrator
export AdjointUnitaryIntegrator

using LinearAlgebra
using NamedTrajectories
using DirectTrajOpt
using PiccoloQuantumObjects

const ‚äó = kron

function KetIntegrator(
    sys::QuantumSystem,
    traj::NamedTrajectory, 
    œàÃÉ::Symbol, 
    a::Symbol 
) 
    return BilinearIntegrator(sys.G, traj, œàÃÉ, a)
end

function UnitaryIntegrator(
    sys::QuantumSystem,
    traj::NamedTrajectory, 
    UÃÉ‚Éó::Symbol, 
    a::Symbol
) 
    GÃÇ = a_ -> I(sys.levels) ‚äó sys.G(a_)
    return BilinearIntegrator(GÃÇ, traj, UÃÉ‚Éó, a)
end

function DensityMatrixIntegrator(
    sys::OpenQuantumSystem,
    traj::NamedTrajectory, 
    œÅÃÉ::Symbol, 
    a::Symbol
) 
    return BilinearIntegrator(sys.ùí¢, traj, œÅÃÉ, a)
end


function AdjointUnitaryIntegrator(
    sys::ParameterizedQuantumSystem,
    traj::NamedTrajectory, 
    UÃÉ‚Éó::Symbol, 
    UÃÉ‚Éó‚Çê::Vector{Symbol},
    a::Symbol
) 
    n_sys = length(sys.G‚Çê)
    
    G = a_ -> I(sys.levels) ‚äó sys.G(a_)

    Gai = (i,a_) -> I(sys.levels) ‚äó sys.G‚Çê[i](a_)

    GÃÇ = a_ ->  vcat(reduce(vcat,[[zeros(size(G(a_))[1],(i-1) * size(G(a_))[1]) G(a_) zeros(size(G(a_))[1],(n_sys-i) * size(G(a_))[1]) Gai(i,a_)] for i in 1:length(sys.G‚Çê)]),[zeros(size(G(a_))[1],size(G(a_))[1]*n_sys) G(a_)])

    return AdjointBilinearIntegrator(GÃÇ, traj, UÃÉ‚Éó, UÃÉ‚Éó‚Çê, a)
end


end